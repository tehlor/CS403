(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (readArgs)
)

(define (readArgs)
    (define env this)
    (define (iter expr)
        (if (not (eof?))
            (begin (eval expr env) 
                (iter (readExpr))
            )
        )
    )
    (iter (readExpr))
)

(define (node value left right)
    (define (display) (print value))
    this
)

(define (newBST value)
    (node value nil nil)
)

(define (displayBST root)
    (define (iter root indent)
        (if (valid? root)
            (begin
                (iter (root'right) (string+ indent "    "))
                (print indent)
                ((root'display))
                (println)
                (iter (root'left) (string+ indent "    "))
                )
            )
        )
    (iter root "")
)

(define (insertBST tree num)
    (if (< num (tree'value))
        (if (null? (tree'left))
            (node (tree'value) (node num nil nil) (tree'right))
            (node (tree'value) (insertBST (tree'left) num) (tree'right))
        )
        (if (> num (tree'value))
            (if (null? (tree'right))
                (node (tree'value) (tree'left) (node num nil nil))
                (node (tree'value) (tree'left) (insertBST (tree'right) num))
            )
        )
    )
)

(define ())