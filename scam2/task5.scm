(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (readArgs)
)

(define (readArgs)
    (define env this)
    (define (iter expr)
        (if (not (eof?))
            (begin (eval expr env) 
                (iter (readExpr))
            )
        )
    )
    (iter (readExpr))
)

(define (pred churchNumeral)
        (lambda (f)
            (lambda (x)
                (((churchNumeral (lambda (g) (lambda (h) (h (g f))))) (lambda (u) x)) (lambda (u) u))
            )
        )
)

(define (create n)
    (compose-n n)
)

(define (compose-n n)
    (lambda (f)
        (lambda (x)
            (if(> n 0)
                (f (((compose-n (- n 1)) f) x))
                x
            )
        )
    )
)