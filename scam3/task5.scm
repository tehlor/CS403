(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (setNilDisplay 'nil)
    (readArgs)
)

(define (readArgs)
    (define env this)
    (define (iter expr)
        (if (not (eof?))
            (begin (eval expr env) 
                (iter (readExpr))
            )
        )
    )
    (iter (readExpr))
)

(define (smush S operator)
    (make S operator 0 0 nil)
)

(define (make S operator i mode result)
    (cond 
        ((== mode 0)
            (cons-stream i (make S operator (+ i 1) 1 result))
        )
        ((== mode 1)
            (cons-stream (stream-car S) (make S operator i 2 result))
        )
        ((== mode 2)
            (cond 
                ((== result nil)
                    (cons-stream (stream-car S) (make (stream-cdr S) operator i 0 (stream-car S)))
                )
                (else
                    (define r (operator result (stream-car S)))
                    (cons-stream r (make (stream-cdr S) operator i 0 r))
                )
            )
        )
    )
)

(define (sdisplay num s)
    (define (iter i S)
        (cond 
            ((< i num)
                (print (stream-car S) ",")
                (iter (+ i 1) (stream-cdr S))
            )
            (else
                (print "...")
            )
        )
    )
    (print "(")
    (iter 0 s)
    (print ")")
)
